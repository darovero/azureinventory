trigger:
- none

pool:
  vmImage: 'windows-latest'

parameters:
- name: resourcegroup
  displayName: 'Resource Group Name'
  type: string
- name: environment
  displayName: 'Environment'
  type: string
  values:
  - 'Non-Prod'
  - 'Prod'
- name: tagsToFilter
  displayName: 'Tags to Filter'
  type: string
  default: 'owner,deploymentid'
- name: ContainerFolder
  default: "Inventory"

variables:
  - group: ${{ parameters.environment }}

steps:
- template: Modules/azurepowershell.yaml

- task: AzureCLI@2
  displayName: 'Generating RG Inventory'
  inputs:
    azureSubscription: $(azureSubscription)
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Define Resource Group
      $RGtoEval = "${{parameters.resourcegroup}}"

      # Function to discover resources within the Resource Group
      function resourcegroup_discover {
          $selectedTags = "${{parameters.tagsToFilter}}" -split ','

          $resources = az resource list --resource-group $RGtoEval --query '[].{Name:name, ResourceType:type, ResourceGroupName:resourceGroup, Location:location, Tags:tags}' --output json | ConvertFrom-Json

          $tagRows = @()

          foreach ($resource in $resources) {
              $tagRow = [PSCustomObject]@{
                  Name            = $resource.Name
                  ResourceType    = $resource.ResourceType
                  ResourceGroupName = $resource.ResourceGroupName
                  Location        = $resource.Location
              }

              $resourceTags = $resource.Tags
              if ($resourceTags) {
                  foreach ($tagName in $selectedTags) {
                      $tagValue = $resourceTags.$tagName
                      $tagRow | Add-Member -MemberType NoteProperty -Name $tagName -Value $tagValue
                  }
              } else {
                  foreach ($tagName in $selectedTags) {
                      $tagRow | Add-Member -MemberType NoteProperty -Name $tagName -Value ""
                  }
              }

              $tagRows += $tagRow
          }

          $tagRows
      }

      $exportData = resourcegroup_discover
      $exportData | Export-Csv "Resources_${{parameters.resourcegroup}}.csv" -NoTypeInformation


- task: AzurePowerShell@5
  displayName: 'Upload Inventory to Azure Blob Storage'
  inputs:
    azureSubscription: $(azureSubscription)
    ScriptType: 'InlineScript'
    Inline: |
      $sourceFilePath = 'Resources_${{parameters.resourcegroup}}.csv'
      $destinationBlobName = '${{parameters.ContainerFolder}}/Resources_${{parameters.resourcegroup}}.csv'
      
      $storageContext = New-AzStorageContext -StorageAccountName $(storageAccountName) -StorageAccountKey $(storageAccountAccessKey)
      $blob = Set-AzStorageBlobContent -Context $storageContext -Container $(storageContainerName) -File $sourceFilePath -Blob $destinationBlobName -Force

    azurePowerShellVersion: LatestVersion
